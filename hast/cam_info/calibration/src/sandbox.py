# %% converting vicon quaternion to axis-angle:
# % http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/
# % angle = 2 * acos(qw) = 2 * 90 degrees = 180 degrees (or -180 degrees which is equivalent)
# % x = qx / sqrt(1-qw*qw) = qx
# % y = qy / sqrt(1-qw*qw) = qy
# % z = qz / sqrt(1-qw*qw) = qw
# ~~~ gatorboard
#   vicon.gatorboard.rpy(4,:) = [-1.41439073607,-0.0940847525965,1.25926914179];
#   vicon.gatorboard.position.vic(4,:) = [0.323170047991,-5.1837381425,1.34311300914];
#   vicon.gatorboard.quaternion.vic(4,:) = [-0.503487759295,-0.411047676962,0.422446777952,0.631726684019];
# %% ~~~~ ugv1
#   vicon.ugv1.rpy(4,:) = [-0.00326748327006,-0.00703469009719,3.01299376065];
#   vicon.ugv1.position.vic(4,:) = [2.07484014801,-5.24006048938,-0.00509100338465];
#   vicon.ugv1.quaternion.vic(4,:) = [0.0034050889268,-0.00185636146384,0.997925628624,0.0642604001422];
# %% ~~~~ ugv2
#   vicon.ugv2.rpy(4,:) = [-0.00273865319105,-0.00363020541665,2.85140160856];
#   vicon.ugv2.position.vic(4,:) = [1.88654481452,-5.89920964325,-0.00657568715195];
#   vicon.ugv2.quaternion.vic(4,:) = [0.00159804075206,-0.00161737496474,0.989489182048,0.144589034762];

import cv2, math
import numpy as np

def makeHomVec(vec):
	return np.concatenate([vec, [1]])

def column(row):
	column = np.array(row)
	return column[:, np.newaxis]

def wrapH(R, t):
	H = np.concatenate([R, -R.dot(t)], axis=1)
	hom = np.array([0,0,0,1])
	H = np.vstack([H, hom])
	return H

def unwrapH(H):
	R = H[:3, :3].copy()
	H_t = H[:3, 3:4].copy()
	t = -np.transpose(R).dot(H_t)
	return R, t

def invertH(H):
	R = H[:3, :3].copy()
	H_t = H[:3, 3:4].copy()
	return wrapH(np.transpose(R), H_t)


gator_p = np.array([[0.8997029174510000, -5.5078831314299999, 0.9773452717190000], \
	[0.8238490814130000, -5.4741078933600003, 0.9504120275630000], \
	[0.2254107267610000, -5.1239406157899996, 0.9745243353810000], \
	[0.3231700479910000, -5.1837381425000002, 1.3431130091400001], \
	[0.5439012171380000, -5.7852562252500004, 1.2892869756400001], \
	[0.4914055938990000, -5.8388725524499998, 0.9617414957760000], \
	[-0.3000931399270000, -4.9769685583300003, 1.0350770988300000], \
	[-0.2020991286380000, -5.1298060275099999, 1.0121568578000000], \
	[-0.1149994068970000, -4.8262017456499997, 1.1287237035000000], \
	[-0.1057314623260000, -4.8408400297999998, 1.3590448568600000], \
	[0.4356905027450000, -5.7514907508600004, 1.3017777172600000], \
	[0.3429664756440000, -5.7704280349900001, 1.2486017657099999], \
	[-0.5946201809870000, -4.5058437709100003, 1.2267713906400000], \
	[-0.7486910921980000, -5.9043074158300000, 1.2959138412100000], \
	[-0.5761360310530000, -6.2011918677000004, 1.4239148633900001], \
	[-0.4480889466440000, -6.2704838706499997, 1.8162493275800000], \
	[-1.0596142415200001, -4.1910444348600002, 1.7215641736800000], \
	[-1.1963259594200000, -5.1226061079900003, 1.5593041106700001], \
	[-1.4213887053100001, -5.5033055318199997, 1.4453920037700001], \
	[-0.8690264586030000, -5.0103890061299996, 2.4059410607000000], \
	[-0.7080364094940000, -4.2182383963800003, 2.3555634205799998], \
	[-0.7631716725990000, -6.0741886670199996, 2.0655292177400000], \
	[-0.9574546112500000, -4.8492343257500004, 1.0549101859500001], \
	[0.3650103615680000, -4.9159423792899997, 1.5440339089599999], \
	[0.0221380276200000, -4.9804501038700000, 1.2984755999699999], \
	[0.5995554142200000, -5.7489375484599998, 0.8831757643530000], \
	[-1.6480949558300000, -6.2799513338399997, 0.8529080716460000], \
	])

gator_q = np.array([[-0.3822301228690000, -0.3876182985830000, 0.5257164560870000, 0.6536622947470000], \
	[-0.4449644222320000, -0.4391850813960000, 0.5590481720640000, 0.5445991815450000], \
	[-0.5414957516100000, -0.3295562297570000, 0.4091756127360000, 0.6563157474560000], \
	[-0.5034877592950000, -0.4110476769620000, 0.4224467779520000, 0.6317266840190000], \
	[-0.3866331876910000, -0.4830377630930000, 0.5680003953690000, 0.5427382872640000], \
	[-0.4443929051200000, -0.4763444469770000, 0.4986007067340000, 0.5718463508300000], \
	[-0.5087615818840000, -0.4074085791920000, 0.4187735202890000, 0.6323042314460000], \
	[0.4975397148530000, 0.6435173747110000, -0.3594071180860000, -0.4573468531190000], \
	[-0.7473711127829999, -0.2691666556070000, 0.2194851381030000, 0.5664026884110001], \
	[-0.7837554989060000, -0.2900094500260000, 0.1860205246680000, 0.5167380392740000], \
	[0.6198146136610000, 0.4665755547100000, -0.4202877347460000, -0.4706328892680000], \
	[-0.3640841291020000, -0.4483471394300000, 0.5329771550510000, 0.6183550288420000], \
	[-0.4774008081810000, -0.3205822777970000, 0.3300671302720000, 0.7485794286680000], \
	[-0.4151913897280000, -0.3942815896730000, 0.5105918819660000, 0.6414468551740000], \
	[-0.3311435288320000, -0.4251878692560000, 0.5941352441330000, 0.5971285881860000], \
	[-0.3979607874250000, -0.2883871728070000, 0.5682554559650000, 0.6599589282660000], \
	[-0.4526805018550000, -0.1738097693130000, 0.2990391618250000, 0.8218552835060000], \
	[-0.3774159917620000, -0.3357658135580000, 0.4105216911850000, 0.7591379510170000], \
	[-0.4505845844990000, -0.5182690328180000, 0.2934733620840000, 0.6650143814850000], \
	[-0.5770531402960000, -0.3059883257040000, 0.4864413195390000, 0.5803065228420000], \
	[-0.5684358196860000, -0.2556834877150000, 0.4053119774550000, 0.6687517281770000], \
	[-0.3979189650890000, -0.4704218535980000, 0.6005892884600000, 0.5095647981040000], \
	[-0.4537022427510000, -0.6334011120840000, 0.1312554241790000, 0.6129676335310000], \
	[-0.3388200537880000, -0.5691138755089999, 0.6049141013940000, 0.4420286164820000], \
	[-0.5466657093140000, -0.0761241839575000, 0.0694472315476000, 0.8309866382240000], \
	[0.0290331400006000, 0.7404749287870001, -0.5054803534780000, -0.4419768872540000], \
	[-0.3215133155300000, -0.6054328890630000, 0.2552887963520000, 0.6818415030160000], \
	])

ugv_p = np.array([[2.0749544500499999, -5.2403154090899999, -0.0050817587966300], \
	[2.0747807199400001, -5.2401789543800001, -0.0053201492699200], \
	[2.0748823553700002, -5.2401223173600000, -0.0052543521450900], \
	[2.0748401480099998, -5.2400604893800002, -0.0050910033846500], \
	[2.0749466778799999, -5.2403204226700000, -0.0050082285294600], \
	[2.0749517780200000, -5.2403054892099998, -0.0050976302142400], \
	[2.0748310146000000, -5.2401581575599998, -0.0049870367423500], \
	[2.0748563635599999, -5.2400751318700003, -0.0051036850374200], \
	[2.0749040096200000, -5.2402676280999998, -0.0051430690912200], \
	[2.0749101616700001, -5.2400742138299998, -0.0050727836469700], \
	[2.0749685573900001, -5.2403397560700000, -0.0050828925351000], \
	[2.0749698755999999, -5.2402667292900000, -0.0050446348744800], \
	[2.0748530184899998, -5.2401275103899998, -0.0052191777608200], \
	[2.0748820823599998, -5.2401409856100001, -0.0050260457202500], \
	[2.0747984715599999, -5.2403213174900003, -0.0051441257978300], \
	[2.0748798665499999, -5.2402422046400003, -0.0049709263892500], \
	[2.0748787742000001, -5.2401245625800001, -0.0050869774201100], \
	[2.0749619103799999, -5.2400984392399996, -0.0051284009106700], \
	[2.0746993423100002, -5.2401883862299998, -0.0050929705583300], \
	[2.0748827095600002, -5.2401862441600002, -0.0050742500391900], \
	[2.0747574663099999, -5.2401806028799998, -0.0052648532056200], \
	[2.0749537884799998, -5.2403431123299997, -0.0050356483877300], \
	[2.0749192082199999, -5.2402778349199997, -0.0049872483139500], \
	[2.0748438509499998, -5.2400930827099996, -0.0051539554529700], \
	[2.0749528906500001, -5.2402447045500002, -0.0052064918219300], \
	[2.0749482693100001, -5.2403114463599998, -0.0049528444762600], \
	[2.0749427398600000, -5.2400697360299997, -0.0051455250153800], \
	])

ugv_q = np.array([[0.0032299430567800, -0.0016233377061400, 0.9979349167410000, 0.0641313822691000], \
	[0.0036698269782200, -0.0019668901591600, 0.9979171911340000, 0.0643734677604000], \
	[0.0035067374556100, -0.0016477506342500, 0.9979381428720000, 0.0640659871662000], \
	[0.0034050889268000, -0.0018563614638400, 0.9979256286240000, 0.0642604001422000], \
	[0.0034396961285900, -0.0014002935926900, 0.9979419893270000, 0.0640155731508000], \
	[0.0033894547853700, -0.0016235758620300, 0.9979379174030000, 0.0640764278527000], \
	[0.0036457154432100, -0.0015447127883000, 0.9979370220660000, 0.0640782538167000], \
	[0.0035895179276400, -0.0018325903346400, 0.9979302620900000, 0.0641790384716000], \
	[0.0033284036544900, -0.0013007473324100, 0.9979354558290000, 0.0641253131432000], \
	[0.0033819399529800, -0.0016625309829800, 0.9979344224359999, 0.0641302346101000], \
	[0.0034230658159800, -0.0014629301393100, 0.9979407078910000, 0.0640350372022000], \
	[0.0034344550539700, -0.0016616102679000, 0.9979363886560000, 0.0640968623800000], \
	[0.0035210836832100, -0.0017020648046100, 0.9979373753680000, 0.0640757347954000], \
	[0.0035032699131800, -0.0014274337739500, 0.9979352460730000, 0.0641165671076000], \
	[0.0037636266718900, -0.0012820175298100, 0.9979337301850000, 0.0641284781074000], \
	[0.0036531791201200, -0.0016736599680600, 0.9979367806240000, 0.0640783506508000], \
	[0.0033386912277900, -0.0018901407283600, 0.9979223743870000, 0.0643134138979000], \
	[0.0033278694217200, -0.0016235661553800, 0.9979299252810000, 0.0642039994599000], \
	[0.0038363449852400, -0.0017113086127100, 0.9979137800930000, 0.0644239193260000], \
	[0.0033373060599600, -0.0015459510976900, 0.9979327806550000, 0.0641610295802000], \
	[0.0037238128057100, -0.0016924133990100, 0.9979204041680000, 0.0643283444511000], \
	[0.0033293734876000, -0.0015104329655700, 0.9979327274030000, 0.0641631158984000], \
	[0.0034590799954000, -0.0013366931860400, 0.9979346785460000, 0.0641297541838000], \
	[0.0034409539160200, -0.0017306425960600, 0.9979371321730000, 0.0640831096558000], \
	[0.0031100620037200, -0.0015235527980600, 0.9979349917440000, 0.0641385886493000], \
	[0.0034807209674600, -0.0015762874190500, 0.9979338707230000, 0.0641357120713000], \
	[0.0035126145795700, -0.0019084571969000, 0.9979260113930000, 0.0642471409131000], \
	])

# rect_indices = [4, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24]

print("ugv_points_file = open('/home/benjamin/ros/data/calibrations/20200117/ugv1/ugv_points_file.m', 'w')")
ugv_points_file = open('/home/benjamin/ros/data/calibrations/20200117/ugv1/ugv_points_file.m', 'w')

rect_idx = 1
for uq, ut, gq, gt in zip(ugv_q, ugv_p, gator_q, gator_p):
	# print("\n\n\n\n")
	# ugv
	u_qx = uq[0]
	u_qy = uq[1]
	u_qz = uq[2]
	u_qw = uq[3]

	ugv_t = column([ut[0], ut[1], ut[2]])
	ugv_t_hom = column([ut[0], ut[1], ut[2], 1])

	ugv_angle = 2 * math.acos(u_qw)
	ugv_axis =column([u_qx / math.sqrt(1-u_qw*u_qw), u_qy / math.sqrt(1-u_qw*u_qw), u_qz / math.sqrt(1-u_qw*u_qw)])
	ugv_R, ugv_J = cv2.Rodrigues(ugv_angle * ugv_axis)
	H_vic2ugv = wrapH(ugv_R, ugv_t)

	# gatorboard
	g_qx = gq[0]
	g_qy = gq[1]
	g_qz = gq[2]
	g_qw = gq[3]

	gator_t = column([gt[0], gt[1], gt[2]])
	gator_t_hom = column([gt[0], gt[1], gt[2], 1])

	gator_angle = 2 * math.acos(g_qw)
	gator_axis =column([g_qx / math.sqrt(1-g_qw*g_qw), g_qy / math.sqrt(1-g_qw*g_qw), g_qz / math.sqrt(1-g_qw*g_qw)])

	gator_R, gator_J = cv2.Rodrigues(gator_angle * gator_axis)
	# print("gator_R: \n{}").format(gator_R)

	H_vic2gat = wrapH(gator_R, gator_t)
	# print("H_vic2gat: \n{}").format(H_vic2gat)
	H_gat2vic = invertH(H_vic2gat)
	# print("H_gat2vic: \n{}").format(H_gat2vic)

	gat_null = H_vic2gat.dot(gator_t_hom)
	# print("gat_null = H_vic2gat.dot(gator_t_hom) = \n{}").format(gat_null)


	objp = np.zeros((6*8,3), np.float32)
	objp[:,:2] = 0.111*np.mgrid[0:8,0:6].T.reshape(-1,2)
	# make defualt checker points into homogenous points
	hom_points = []
	check_points_vic = []
	check_points_ugv = []
	i = 1
	for point in objp:
		# convert checkerboard point to homogenous point
		hom_point_gat = makeHomVec(point)
		hom_points.append(hom_point_gat)
		# map gator point to vicon frame
		check_point_vic = H_gat2vic.dot(hom_point_gat)
		check_points_vic.append(check_point_vic)
		# calculate checker points in ugv frame
		check_point_ugv = H_vic2ugv.dot(check_point_vic)
		check_points_ugv.append(check_point_ugv)
		# print("\n\n")
		# print("hom_point_gat:\n{}").format(hom_point_gat)
		# print("H_gat2vic: \n{}").format(H_gat2vic)
		# print("check_point_vic:\n{}").format(check_point_vic)
		# print("H_vic2ugv: \n{}").format(H_vic2ugv)
		# print("ugv_points.frame_{0:03d}.pts({1},:) = [{2},{3},{4}];\n").format(rect_idx, i, check_point_ugv[0], check_point_ugv[1], check_point_ugv[2])
		ugv_points_file.write(("ugv_points.frame_{0:03d}.pts({1},:) = [{2},{3},{4}];\n").format(rect_idx, i, check_point_ugv[0], check_point_ugv[1], check_point_ugv[2]))
		i+=1
	ugv_points_file.write("\n")
	rect_idx+=1



	# point = objp[0]
	# # convert checkerboard point to homogenous point
	# hom_point_gat = makeHomVec(point)
	# hom_points.append(hom_point_gat)
	# # map gator point to vicon frame
	# check_point_vic = H_gat2vic.dot(hom_point_gat)
	# check_points_vic.append(check_point_vic)
	# # calculate checker points in ugv frame
	# check_point_ugv = H_vic2ugv.dot(check_point_vic)
	# check_points_ugv.append(check_point_ugv)
	# # print("\n\n")
	# print("hom_point_gat:\n{}").format(hom_point_gat)
	# print("H_gat2vic: \n{}").format(H_gat2vic)
	# # print("check_point_vic:\n{}").format(check_point_vic)
	# # print("H_vic2ugv: \n{}").format(H_vic2ugv)
	# # print("check_point_ugv:\n{}").format(check_point_ugv)
	#
	# vic_null = H_gat2vic.dot(hom_point_gat)
	# print("vic_null = H_gat2vic.dot(hom_point_gat) = \n{}").format(vic_null)
	# print("gator_t_hom: \n{}").format(gator_t_hom)


ugv_points_file.close()
