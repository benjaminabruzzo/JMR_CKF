%% ~~~~~~~~~~~~~~~~~~~~~~ Write  leftcam.yaml ~~~~~~~~~~~~~~~~~~~~~~
function writeYaml(cameraInfo)
	cameraInfo.ID_filename = [cameraInfo.file_path cameraInfo.SERIAL '.yaml'];
	yaml = fopen(cameraInfo.ID_filename,'w');
	fprintf(yaml,'# %s parameters\n', cameraInfo.host);
	fprintf(yaml,'# SERIAL %s\n', cameraInfo.SERIAL);
	fprintf(yaml,'# yaml file auto-generated by : matlabCalibration.m and writeYaml.m\n');
	fprintf(yaml,'# yaml file auto-generated on : %s\n', date);
	fprintf(yaml,'#### TAB CANNOT BE USED #####\n\n');

	fprintf(yaml,'image_width: %i\n', cameraInfo.image_width);
	fprintf(yaml,'image_height: %i\n\n', cameraInfo.image_height);
 
	fprintf(yaml,'camera_matrix:\n');
	fprintf(yaml,'  rows: %i\n', size(cameraInfo.K,1));
	fprintf(yaml,'  cols: %i\n', size(cameraInfo.K,2));
	fprintf(yaml,'  data: [');
		A = cameraInfo.K';
		for idx = 1:(numel(cameraInfo.K)-1)
			fprintf(yaml,'%6.16f, ',A(idx));
		end
		fprintf(yaml,'%6.16f]\n\n', A(end));
		clear A;

	fprintf(yaml,'distortion_coefficients:\n');
	fprintf(yaml,'  rows: %i\n',size(cameraInfo.d,1));
	fprintf(yaml,'  cols: %i\n',size(cameraInfo.d,2));
	fprintf(yaml,'  data: [');
		A = cameraInfo.d';
		for idx = 1:(numel(cameraInfo.d)-1)
			fprintf(yaml,'%6.16f, ',A(idx));
		end
		fprintf(yaml,'%6.16f]\n\n', A(end));
		clear A;

	fprintf(yaml,'rectification_matrix:\n');
	fprintf(yaml,'  rows: %i\n',size(cameraInfo.R,1));
	fprintf(yaml,'  cols: %i\n',size(cameraInfo.R,2));
	fprintf(yaml,'  data: [');
		A = cameraInfo.R';
		for idx = 1:(numel(cameraInfo.R)-1)
			fprintf(yaml,'%6.16f, ',A(idx));
		end
		fprintf(yaml,'%6.16f]\n\n', A(end));
		clear A;

	fprintf(yaml,'projection_matrix:\n');
	fprintf(yaml,'  rows: %i\n',size(cameraInfo.P,1));
	fprintf(yaml,'  cols: %i\n',size(cameraInfo.P,2));
	fprintf(yaml,'  data: [');
		A = cameraInfo.P';
		for idx = 1:(numel(cameraInfo.P)-1)
			fprintf(yaml,'%6.16f, ',A(idx));
		end
		fprintf(yaml,'%6.16f]\n\n', A(end));
		clear A;

	fprintf(yaml,'distortion_model: plumb_bob\n');
	fprintf(yaml,'camera_info_url: file:///home/benjamin/.ros/camera_info/${NAME}.yaml\n\n');

	fprintf(yaml,'#Auto-Control States\n');
	fprintf(yaml,'#Off (0): turns the feature off\n');
	fprintf(yaml,'#Query (1): returns the current mode and (if possible) the value of the feature, with no change to the device\n');
	fprintf(yaml,'#Auto (2): the camera sets the value continuously\n');
	fprintf(yaml,'#Manual (3): sets a specific value from the corresponding parameter\n');
	fprintf(yaml,'#OnePush (4): the camera sets the value once, then holds it constant\n');
	fprintf(yaml,'#None (5): the camera does not provide this feature \n\n');

% 
% 	fprintf(yaml,'auto_white_balance: false\n');
% 	fprintf(yaml,'white_balance_blue: 1000\n');
% 	fprintf(yaml,'white_balance_red: 400\n');
% 	fprintf(yaml,'enable_trigger: false\n');
% 	fprintf(yaml,'# trigger_mode: mode14\n');
% 	fprintf(yaml,'# trigger_delay: \n');
% 	fprintf(yaml,'# trigger_parameter: \n');
% 	fprintf(yaml,'# trigger_polarity: \n');
% 	fprintf(yaml,'# trigger_source: \n');
% 	fprintf(yaml,'auto_gain: false\n');
% 	fprintf(yaml,'gain: 8.375\n');
% 	fprintf(yaml,'# gamma: \n');
% 	fprintf(yaml,'auto_exposure: false\n');
% 	fprintf(yaml,'exposure: 0.5\n');
% 	fprintf(yaml,'auto_shutter: false\n');
% 	fprintf(yaml,'shutter_speed: 0.002 # seconds\n');
% 
% 	fprintf(yaml,'# auto_brightness: 3\n');
% 	fprintf(yaml,'# auto_gamma: 3\n');
% 	fprintf(yaml,'# auto_hue: 3\n');
% 	fprintf(yaml,'# auto_saturation: 3\n');
% 	fprintf(yaml,'# auto_sharpness: 3\n');
% 	fprintf(yaml,'# auto_white_balance: 3\n');
% 	fprintf(yaml,'# auto_iris: 3\n');
% 	fprintf(yaml,'# auto_focus: 3\n');
% 	fprintf(yaml,'# auto_zoom: 3\n\n');
% 	fprintf(yaml,'# bayer_pattern: rggb\n');
% 	fprintf(yaml,'# brightness: 170.0\n');
% 	fprintf(yaml,'# frame_id: /camera\n');
% 	fprintf(yaml,'# frame_rate: 60.0\n');
% 	fprintf(yaml,'# gamma: 0\n');
% 	fprintf(yaml,'# hue: 0.0\n');
% 	fprintf(yaml,'# iris: 8.0\n');
% 	fprintf(yaml,'# iso_speed: 400 #Fixed, the cameras dont operate on other ISO\n');
% 	fprintf(yaml,'# reset_on_open: false\n');
% 	fprintf(yaml,'# use_ros_time: true\n');
% 	fprintf(yaml,'# video_mode: 640x480_mono8\n');
% 	fprintf(yaml,['# bayer_method: '''' #default method, uses ros image_proc\n']);
% 	fprintf(yaml,'# binning_x: 0\n');
% 	fprintf(yaml,'# binning_y: 0\n');
% 	fprintf(yaml,'# focus: 0.0\n');
% 	fprintf(yaml,'# format7_color_coding: mono16\n');
% 	fprintf(yaml,'# format7_packet_size: 0\n');
% 	fprintf(yaml,'# roi_height: 0\n');
% 	fprintf(yaml,'# roi_width: 0\n');
% 	fprintf(yaml,'# saturation: 1.0\n');
% 	fprintf(yaml,'# sharpness: 1.0\n');
% 	fprintf(yaml,'# x_offset: 0\n');
% 	fprintf(yaml,'# y_offset: 0\n');
% 	fprintf(yaml,'# zoom: 0.0\n');
	disp([cameraInfo.ID_filename ' created']);
end