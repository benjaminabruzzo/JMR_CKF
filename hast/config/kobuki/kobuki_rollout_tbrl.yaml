TrajectoryPlannerROS:

# Robot Configuration Parameters
  max_vel_x: 0.175 # The maximum x velocity for the robot in m/s.
  min_vel_x: 0.05  # The minimum x velocity for the robot in m/s.
  escape_vel: -0.1 #speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse

  max_vel_theta:  0.75        # 1.0 # The absolute value of the maximum rotational velocity for the robot in rad/s
  min_vel_theta: -0.75        # The minimum rotational velocity allowed for the base in radians/sec
  min_in_place_vel_theta: 0.2 # The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec

  acc_lim_x: 2.0  # The x acceleration limit of the robot in meters/sec^2
  acc_lim_y: 0.0  # diff drive robot
  acc_lim_theta: 2.0 # The rotational acceleration limit of the robot in radians/sec^2

  holonomic_robot: false # Differential-drive robot configuration - necessary?

# Goal Tolerance Parameters
  yaw_goal_tolerance: 3.2   # 0.05
  xy_goal_tolerance: 0.33 # 0.10
  # latch_xy_goal_tolerance: false

# Forward Simulation Parameters
  sim_time: 3.0          # (double, default: 1.7)   The amount of time to forward-simulate trajectories in seconds
  sim_granularity: 0.05 # (double, default: 0.025) The step size, in meters, to take between points on a given trajectory
  vx_samples: 6          # (integer, default: 3)    The number of samples to use when exploring the x velocity space
  vtheta_samples: 20     # (integer, default: 20)   The number of samples to use when exploring the theta velocity space

# Trajectory Scoring Parameters
  dwa: false            # (bool, default: true) Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  meter_scoring: false  #(bool, default: false) Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default. New in navigation 1.3.1
  pdist_scale: 0.6      # (double, default: 0.6) The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  gdist_scale: 0.8      # (double, default: 0.8) The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
  occdist_scale: 0.1    # (double, default: 0.01) The weighting for how much the controller should attempt to avoid obstacles
  heading_lookahead: 0.325      # (double, default: 0.325) How far to look ahead in meters when scoring different in-place-rotation trajectories
  heading_scoring: false        # (bool, default: false) Whether to score based on the robot's heading to the path or its distance from the path
  heading_scoring_timestep: 0.8 # (double, default: 0.8) How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
  publish_cost_grid_pc: true    # (bool, default: false) Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account. New in navigation 1.4.0

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05  # 0.05   - How far the robot must travel in meters before oscillation flags are reset

# Global Plan Parameters
  prune_plan: true # true # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
